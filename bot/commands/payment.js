const ADMIN_CHAT_ID = "948172585";
const userState = {};

function startPaymentFlow(bot, chatId) {
  userState[chatId] = { step: "name" };
  bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:");
}

function setupPayment(bot) {
  bot.on("message", (msg) => {
    const chatId = msg.chat.id;
    const state = userState[chatId];

    if (!state || msg.text?.startsWith("/")) return;

    switch (state.step) {
      case "name":
        state.fullName = msg.text;
        state.username = msg.from.username;
        state.step = "insta";
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ Instagram:");
        break;

      case "insta":
        state.instaNick = msg.text;
        state.step = "package";

        const options = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "FULL PASS (5 –∫–ª–∞—Å—Å–æ–≤) - 100 BYN",
                  callback_data: "full",
                },
                {
                  text: "HALF PASS (3 –∫–ª–∞—Å—Å–∞) - 80 BYN",
                  callback_data: "half",
                },
                { text: "ONE PASS (1 –∫–ª–∞—Å—Å) - 30 BYN", callback_data: "one" },
              ],
            ],
          },
        };

        bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —É—á–∞—Å—Ç–∏—è:", options);
        break;

      case "waiting_photo":
        if (!msg.photo) {
          bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞.");
          return;
        }

        const fileId = msg.photo[msg.photo.length - 1].file_id;

        bot.sendPhoto(ADMIN_CHAT_ID, fileId, {
          caption: `
üì• –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂:
üë§ –ò–º—è: ${state.fullName}
üì∏ Instagram: ${state.instaNick}
üéü –ü–∞–∫–µ—Ç: ${state.packageText}
üßë‚Äçüè´ –•–æ—Ä–µ–æ–≥—Ä–∞—Ñ—ã: ${state.selectedChoreographers?.join(", ") || "‚Äî"}
üÜî Telegram: @${state.username || "–Ω–µ—Ç –Ω–∏–∫–∞"}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å?`,
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `confirm_${chatId}` },
                { text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${chatId}` },
              ],
            ],
          },
        });

        state.step = "done";
        bot.sendMessage(
          chatId,
          "–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        );
        break;
    }
  });

  bot.on("callback_query", (query) => {
    const data = query.data;
    const chatId = query.message.chat.id;
    const state = userState[chatId];

    if (data.startsWith("confirm_")) {
      const userChatId = data.split("_")[1];
      bot.sendMessage(
        userChatId,
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö!"
      );
      bot.answerCallbackQuery(query.id, { text: "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞." });
      return;
    }

    if (data.startsWith("reject_")) {
      const userChatId = data.split("_")[1];
      bot.sendMessage(
        userChatId,
        `
‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ Telegram: @galinskaaya`
      );
      bot.answerCallbackQuery(query.id, { text: "–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞." });
      return;
    }

    // –í—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞
    if (state?.step === "package") {
      let packageText = "";
      switch (data) {
        case "full":
          packageText = "FULL PASS (5 –∫–ª–∞—Å—Å–æ–≤) - 100 BYN";
          break;
        case "half":
          packageText = "HALF PASS (3 –∫–ª–∞—Å—Å–∞) - 80 BYN";
          break;
        case "one":
          packageText = "ONE PASS (1 –∫–ª–∞—Å—Å) - 30 BYN";
          break;
      }

      state.packageText = packageText;
      state.packageType = data;

      const priceMatch = packageText.match(/(\d+)\s*BYN/);
      const price = priceMatch ? priceMatch[1] : "‚Äî";

      if (data === "full") {
        state.step = "waiting_photo";

        bot.sendMessage(
          chatId,
          `
–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: ${state.fullName}
üì∏ Instagram: ${state.instaNick}
üéü –ü–∞–∫–µ—Ç: ${packageText}
üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${price} BYN

–û–ø–ª–∞—Ç–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É:  
üí≥ 4255 1901 3306 4249  
üìÖ 01/26  
üè¶ –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫  

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å—é–¥–∞.`
        );

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        bot.sendMessage(
          ADMIN_CHAT_ID,
          `
üìã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:
üë§ –ò–º—è: ${state.fullName}
üì∏ Instagram: ${state.instaNick}
üéü –ü–∞–∫–µ—Ç: ${packageText}
üßë‚Äçüè´ –•–æ—Ä–µ–æ–≥—Ä–∞—Ñ—ã: ‚Äî
üÜî Telegram: @${state.username || "–Ω–µ—Ç –Ω–∏–∫–∞"}

–û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`
        );

        bot.answerCallbackQuery(query.id);
        return;
      }

      // HALF –∏–ª–∏ ONE ‚Üí –≤—ã–±–æ—Ä —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–æ–≤
      state.step = "select_choreographers";
      state.selectedChoreographers = [];
      state.choreographers = [
        "ANUTKA LUV",
        "KIDADA",
        "SHAVUHA",
        "ALEX ARLET",
        "GALINSKAAYA",
      ];

      const keyboard = state.choreographers.map((name) => {
        return [{ text: `‚òê ${name}`, callback_data: `choreo_${name}` }];
      });
      keyboard.push([{ text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: "choreo_done" }]);

      bot.sendMessage(
        chatId,
        `
–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ${data === "one" ? "–∞" : "–æ–≤"}${
          data === "half" ? " (–¥–æ 3-—Ö)" : ""
        }:`,
        {
          reply_markup: { inline_keyboard: keyboard },
        }
      );
      bot.answerCallbackQuery(query.id);
      return;
    }

    // –í—ã–±–æ—Ä —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–æ–≤
    if (state?.step === "select_choreographers") {
      const type = state.packageType;

      if (data === "choreo_done") {
        const count = state.selectedChoreographers.length;

        if (type === "one" && count !== 1) {
          bot.answerCallbackQuery(query.id, {
            text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–≥–æ —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∞.",
          });
          return;
        }
        if (type === "half" && count === 0) {
          bot.answerCallbackQuery(query.id, {
            text: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∞.",
          });
          return;
        }

        state.step = "waiting_photo";
        const choreoList = state.selectedChoreographers.join(", ");
        const price = state.packageText.match(/(\d+)\s*BYN/)[1];

        bot.editMessageReplyMarkup(undefined, {
          chat_id: chatId,
          message_id: query.message.message_id,
        });

        bot.sendMessage(
          chatId,
          `
–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ –ò–º—è: ${state.fullName}
üì∏ Instagram: ${state.instaNick}
üéü –ü–∞–∫–µ—Ç: ${state.packageText}
üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${price} BYN
üßë‚Äçüè´ –•–æ—Ä–µ–æ–≥—Ä–∞—Ñ—ã: ${choreoList}

–û–ø–ª–∞—Ç–∞ –±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É:  
üí≥ 4255 1901 3306 4249  
üìÖ 01/26  
üè¶ –ë–µ–ª–∞—Ä—É—Å–±–∞–Ω–∫  

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —á–µ–∫–∞ —Å—é–¥–∞.`
        );

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        bot.sendMessage(
          ADMIN_CHAT_ID,
          `
üìã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:
üë§ –ò–º—è: ${state.fullName}
üì∏ Instagram: ${state.instaNick}
üéü –ü–∞–∫–µ—Ç: ${state.packageText}
üßë‚Äçüè´ –•–æ—Ä–µ–æ–≥—Ä–∞—Ñ—ã: ${choreoList}
üÜî Telegram: @${state.username || "–Ω–µ—Ç –Ω–∏–∫–∞"}

–û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`
        );

        bot.answerCallbackQuery(query.id);
        return;
      }

      const choreoName = data.replace("choreo_", "");
      const index = state.selectedChoreographers.indexOf(choreoName);

      if (index === -1) {
        if (type === "one" && state.selectedChoreographers.length >= 1) {
          bot.answerCallbackQuery(query.id, {
            text: "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∞.",
          });
          return;
        }
        if (type === "half" && state.selectedChoreographers.length >= 3) {
          bot.answerCallbackQuery(query.id, {
            text: "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∞.",
          });
          return;
        }
        state.selectedChoreographers.push(choreoName);
      } else {
        state.selectedChoreographers.splice(index, 1);
      }

      const updatedKeyboard = state.choreographers.map((name) => {
        const selected = state.selectedChoreographers.includes(name);
        return [
          {
            text: `${selected ? "‚úÖ" : "‚òê"} ${name}`,
            callback_data: `choreo_${name}`,
          },
        ];
      });
      updatedKeyboard.push([
        { text: "‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data: "choreo_done" },
      ]);

      bot.editMessageReplyMarkup(
        { inline_keyboard: updatedKeyboard },
        {
          chat_id: chatId,
          message_id: query.message.message_id,
        }
      );
      bot.answerCallbackQuery(query.id);
    }
  });
}

module.exports = { setupPayment, startPaymentFlow };
